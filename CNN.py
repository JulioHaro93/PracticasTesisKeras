# -*- coding: utf-8 -*-

"""Latesis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gu8nFGvfxgbTLrJTidmSlftRwvQZ7oF2
"""

#from google.colab import drive
#drive.mount('/content/drive')

#!pip install tensorflow==2.12

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
import glob
import sklearn as skl
from sklearn.model_selection import train_test_split
import cv2
import os

# %matplotlib inline
import glob
import numpy as np
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from sklearn.model_selection import train_test_split

# Tamaño de imagen a redimensionar
img_size = (224, 224)
print("inicio")


print("Cargando dataset")

def cargar_dataset_npy(directorio_base):
    X = []
    y = []
    clases = sorted(os.listdir(directorio_base))
    
    for clase in clases:
        print(clase)
        clase_dir = os.path.join(directorio_base, clase)
        if not os.path.isdir(clase_dir):
            continue  # Ignorar archivos sueltos

        archivos = [f for f in os.listdir(clase_dir) if f.endswith('.npy')]

        for archivo in archivos:
            path_archivo = os.path.join(clase_dir, archivo)
            img_array = np.load(path_archivo)
            X.append(img_array)
            y.append(clase)
    return np.array(X), np.array(y)

directorio_numpy = "/home/julio/Documentos/TEST_TESIS/Tesis/db/procesadas/preprocesadas_numpy"
X, y = cargar_dataset_npy(directorio_numpy)

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

le = LabelEncoder()
y_encoded = le.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)


import matplotlib.pyplot as plt

plt.imshow(X_train[0])
plt.title(f"Clase: {le.inverse_transform([y_train[0]])[0]}")
plt.axis('off')
plt.show()


def guardaPesosYBias(model):
    try:
        model_name = 'Primer_CNN_5_capitasBBs.h5'
        tf.keras.models.save_model(model, model_name)
        print("intentando versión para dispositivos móviles")
        converter = tf.lite.TFLiteConverter.from_keras_model(model)
        return "Se pudo"
    except:
        print("No se pudo guardar el archivillo, lamento las horas invertidas entrenando")
        print("En serio perdón, att: aparato computador")
        return "No se pudo :("



def iniciarModeloNormalillo(X_train, y_train, X_test, y_test):
    
    print("corremos la convolucional")
    model = tf.keras.models.Sequential()

    model.add(tf.keras.layers.Conv2D(filters = 32, kernel_size=5, strides =(1,1), padding='same', activation = 'relu', input_shape=(224, 224, 3)))
    model.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2, padding='valid'))
    model.add(tf.keras.layers.Conv2D(64, kernel_size=5, strides = (1,1), padding = 'same', activation='relu'))
    model.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2, padding='valid'))
    model.add(tf.keras.layers.Conv2D(64, kernel_size=5, strides = (1,1), padding = 'same', activation='relu'))
    model.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2, padding='valid'))
    model.add(tf.keras.layers.Conv2D(64, kernel_size=5, strides = (1,1), padding = 'same', activation='relu'))
    model.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2, padding='valid'))
    model.add(tf.keras.layers.Conv2D(64, kernel_size=5, strides = (1,1), padding = 'same', activation='relu'))
    model.add(tf.keras.layers.Flatten()) #Aquí se aplana el vector de características. vamos a ver qué tal jala para el dataset al natural

    model.add(tf.keras.layers.Dense(units=128, activation='relu'))
    model.add(tf.keras.layers.Dense(units=128, activation='relu'))

    model.add(tf.keras.layers.Dense(units = 6, activation='softmax'))

    model.summary()

    model.compile(optimizer='adam', loss = 'sparse_categorical_crossentropy', metrics = ['sparse_categorical_accuracy'])

    model.fit(X_train, y_train, epochs= 10, batch_size=10)

    test_loss, test_accuracy = model.evaluate(X_test, y_test)
    print("Test accuracy: {}".format(test_accuracy))
    print("Test loss: {}".format(test_loss))
    print("Ha terminao de entrenarse lar red")
    sepudo= guardarPesosYBias(model)
    
    return sepudo

input = ("continuar? sí, 1")

while True:
    if input ==1:
        iniciarModeloNormalillo()
    else:
        print("Aquí aguantándote a que quieras")

